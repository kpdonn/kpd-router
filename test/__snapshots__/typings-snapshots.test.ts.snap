// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify expected errors from missing required goto params matches expected 1`] = `
"typings-tests/expected-errors-missing-required-goto-params.tsx(27,12): error TS2345: Argument of type '{ r1: string; }' is not assignable to parameter of type 'Identity<{ q1?: string | undefined; } & { r1: string; r2: string; }>'.
  Property 'r2' is missing in type '{ r1: string; }'.
typings-tests/expected-errors-missing-required-goto-params.tsx(28,12): error TS2345: Argument of type '{ r2: string; }' is not assignable to parameter of type 'Identity<{ q1?: string | undefined; } & { r1: string; r2: string; }>'.
  Property 'r1' is missing in type '{ r2: string; }'.
typings-tests/expected-errors-missing-required-goto-params.tsx(29,12): error TS2345: Argument of type '{ q1: string; }' is not assignable to parameter of type 'Identity<{ q1?: string | undefined; } & { r1: string; r2: string; }>'.
  Property 'r1' is missing in type '{ q1: string; }'.
typings-tests/expected-errors-missing-required-goto-params.tsx(30,12): error TS2345: Argument of type '{ r1: string; q1: string; }' is not assignable to parameter of type 'Identity<{ q1?: string | undefined; } & { r1: string; r2: string; }>'.
  Property 'r2' is missing in type '{ r1: string; q1: string; }'.
typings-tests/expected-errors-missing-required-goto-params.tsx(32,12): error TS2345: Argument of type '{ r1: string; }' is not assignable to parameter of type 'Identity<{ r1?: string | undefined; } & { r2: string; }>'.
  Property 'r2' is missing in type '{ r1: string; }'.
typings-tests/expected-errors-missing-required-goto-params.tsx(34,12): error TS2345: Argument of type '{ r1: number; }' is not assignable to parameter of type 'Identity<{ r1?: number | undefined; } & { r2: boolean; }>'.
  Property 'r2' is missing in type '{ r1: number; }'.
typings-tests/expected-errors-missing-required-goto-params.tsx(35,12): error TS2345: Argument of type '{}' is not assignable to parameter of type 'Identity<{ r1?: number | undefined; } & { r2: boolean; }>'.
  Property 'r2' is missing in type '{}'.
typings-tests/expected-errors-missing-required-goto-params.tsx(36,1): error TS2554: Expected 1 arguments, but got 0.
"
`;

exports[`Verify expected errors from missing required goto params matches expected 2`] = `""`;

exports[`Verify expected errors from wrong component props matches expected 1`] = `
"typings-tests/expected-errors-wrong-component-props.tsx(12,31): error TS2345: Argument of type '{ name: \\"p1\\"; path: [string, \\"r1\\"[]]; queryParams: \\"q1\\"[]; defaults: { q1: true; }; component: (arg: { r1: string; q1: boolean; }) => Element; converters: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; q1: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; }; }' is not assignable to parameter of type '{ name: \\"p1\\"; path: string | [string, \\"r1\\"[]]; queryParams?: \\"q1\\"[] | undefined; onLoad?: ((arg: Identity<{} & { r1: number; q1: boolean; }>) => void) | undefined; defaults?: { q1: boolean; } | undefined; converters?: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; q1: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; } | undefined; component?: (new (props: Identity<{} & { r1: number; q1: boolean; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: number; q1: boolean; }>> | undefined; }'.
  Types of property 'component' are incompatible.
    Type '(arg: { r1: string; q1: boolean; }) => Element' is not assignable to type '(new (props: Identity<{} & { r1: number; q1: boolean; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: number; q1: boolean; }>> | undefined'.
      Type '(arg: { r1: string; q1: boolean; }) => Element' is not assignable to type 'StatelessComponent<Identity<{} & { r1: number; q1: boolean; }>>'.
        Types of parameters 'arg' and 'props' are incompatible.
          Type 'Identity<{} & { r1: number; q1: boolean; }> & { children?: ReactNode; }' is not assignable to type '{ r1: string; q1: boolean; }'.
            Types of property 'r1' are incompatible.
              Type 'number' is not assignable to type 'string'.
typings-tests/expected-errors-wrong-component-props.tsx(29,31): error TS2345: Argument of type '{ name: \\"p2\\"; path: [string, \\"r1\\"[]]; queryParams: \\"q1\\"[]; defaults: { r1: string; }; component: (arg: { r1: string; q1: string; }) => Element; }' is not assignable to parameter of type '{ name: \\"p2\\"; path: string | [string, \\"r1\\"[]]; queryParams?: \\"q1\\"[] | undefined; onLoad?: ((arg: Identity<{ q1?: string | undefined; } & { r1: string; }>) => void) | undefined; defaults?: { r1: string; } | undefined; converters?: {} | undefined; component?: (new (props: Identity<{ q1?: string | undefined; } & { r1: string; }>) => Component<any, {}>) | StatelessComponent<Identity<{ q1?: string | undefined; } & { r1: string; }>> | undefined; }'.
  Types of property 'component' are incompatible.
    Type '(arg: { r1: string; q1: string; }) => Element' is not assignable to type '(new (props: Identity<{ q1?: string | undefined; } & { r1: string; }>) => Component<any, {}>) | StatelessComponent<Identity<{ q1?: string | undefined; } & { r1: string; }>> | undefined'.
      Type '(arg: { r1: string; q1: string; }) => Element' is not assignable to type 'StatelessComponent<Identity<{ q1?: string | undefined; } & { r1: string; }>>'.
        Types of parameters 'arg' and 'props' are incompatible.
          Type 'Identity<{ q1?: string | undefined; } & { r1: string; }> & { children?: ReactNode; }' is not assignable to type '{ r1: string; q1: string; }'.
            Types of property 'q1' are incompatible.
              Type 'string | undefined' is not assignable to type 'string'.
                Type 'undefined' is not assignable to type 'string'.
typings-tests/expected-errors-wrong-component-props.tsx(37,31): error TS2345: Argument of type '{ name: \\"noQuery\\"; path: [string, (\\"r1\\" | \\"r2\\")[]]; component: typeof P3Comp; defaults: { r1: number; r2: false; }; converters: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; r2: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; }; }' is not assignable to parameter of type '{ name: \\"noQuery\\"; path: string | [string, (\\"r1\\" | \\"r2\\")[]]; queryParams?: string[] | undefined; onLoad?: ((arg: Identity<{} & { r1: number; r2: boolean; }>) => void) | undefined; defaults?: { r1: number; r2: boolean; } | undefined; converters?: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; r2: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; } | undefined; component?: (new (props: Identity<{} & { r1: number; r2: boolean; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: number; r2: boolean; }>> | undefined; }'.
  Types of property 'component' are incompatible.
    Type 'typeof P3Comp' is not assignable to type '(new (props: Identity<{} & { r1: number; r2: boolean; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: number; r2: boolean; }>> | undefined'.
      Type 'typeof P3Comp' is not assignable to type 'StatelessComponent<Identity<{} & { r1: number; r2: boolean; }>>'.
        Type 'typeof P3Comp' provides no match for the signature '(props: Identity<{} & { r1: number; r2: boolean; }> & { children?: ReactNode; }, context?: any): ReactElement<any> | null'.
"
`;

exports[`Verify expected errors from wrong component props matches expected 2`] = `""`;

exports[`Verify expected errors from wrong default types matches expected 1`] = `
"typings-tests/expected-errors-wrong-default-type.tsx(6,31): error TS2345: Argument of type '{ name: \\"p1\\"; path: [string, \\"r1\\"[]]; queryParams: \\"q1\\"[]; defaults: { q1: boolean; }; }' is not assignable to parameter of type '{ name: \\"p1\\"; path: string | [string, \\"r1\\"[]]; queryParams?: \\"q1\\"[] | undefined; onLoad?: ((arg: Identity<{} & { r1: string; q1: string; }>) => void) | undefined; defaults?: Exactly<Partial<PropTypes<\\"r1\\", \\"q1\\", {}>>, { q1: boolean; }> | undefined; converters?: {} | undefined; component?: (new (props: Identity<{} & { r1: string; q1: string; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: string; q1: string; }>> | undefined; }'.
  Types of property 'defaults' are incompatible.
    Type '{ q1: boolean; }' is not assignable to type 'Exactly<Partial<PropTypes<\\"r1\\", \\"q1\\", {}>>, { q1: boolean; }> | undefined'.
      Type '{ q1: boolean; }' is not assignable to type 'Exactly<Partial<PropTypes<\\"r1\\", \\"q1\\", {}>>, { q1: boolean; }>'.
        Types of property 'q1' are incompatible.
          Type 'boolean' is not assignable to type 'string | undefined'.
typings-tests/expected-errors-wrong-default-type.tsx(13,31): error TS2345: Argument of type '{ name: \\"p1\\"; path: [string, \\"r1\\"[]]; queryParams: \\"q1\\"[]; defaults: { r1: string; }; converters: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; }; }' is not assignable to parameter of type '{ name: \\"p1\\"; path: string | [string, \\"r1\\"[]]; queryParams?: \\"q1\\"[] | undefined; onLoad?: ((arg: Identity<{ q1?: string | undefined; } & { r1: number; }>) => void) | undefined; defaults?: Exactly<Partial<PropTypes<\\"r1\\", \\"q1\\", { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; }>>, { r1: string; }> | undefined; converters?: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; } | undefined; component?: (new (props: Identity<{ q1?: string | undefined; } & { r1: number; }>) => Component<any, {}>) | StatelessComponent<Identity<{ q1?: string | undefined; } & { r1: number; }>> | undefined; }'.
  Types of property 'defaults' are incompatible.
    Type '{ r1: string; }' is not assignable to type 'Exactly<Partial<PropTypes<\\"r1\\", \\"q1\\", { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; }>>, { r1: string; }> | undefined'.
      Type '{ r1: string; }' is not assignable to type 'Exactly<Partial<PropTypes<\\"r1\\", \\"q1\\", { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; }>>, { r1: string; }>'.
        Types of property 'r1' are incompatible.
          Type 'string' is not assignable to type 'number | undefined'.
"
`;

exports[`Verify expected errors from wrong default types matches expected 2`] = `""`;

exports[`Verify expected errors from wrong onload params matches expected 1`] = `
"typings-tests/expected-errors-wrong-onload-params.tsx(9,31): error TS2345: Argument of type '{ name: \\"p1\\"; path: [string, \\"r1\\"[]]; queryParams: \\"q1\\"[]; defaults: { q1: true; }; onLoad: (arg: { r1: string; q1: boolean; }) => { r1: string; q1: boolean; }; converters: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; q1: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; }; }' is not assignable to parameter of type '{ name: \\"p1\\"; path: string | [string, \\"r1\\"[]]; queryParams?: \\"q1\\"[] | undefined; onLoad?: ((arg: Identity<{} & { r1: number; q1: boolean; }>) => void) | undefined; defaults?: { q1: boolean; } | undefined; converters?: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; q1: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; } | undefined; component?: (new (props: Identity<{} & { r1: number; q1: boolean; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: number; q1: boolean; }>> | undefined; }'.
  Types of property 'onLoad' are incompatible.
    Type '(arg: { r1: string; q1: boolean; }) => { r1: string; q1: boolean; }' is not assignable to type '((arg: Identity<{} & { r1: number; q1: boolean; }>) => void) | undefined'.
      Type '(arg: { r1: string; q1: boolean; }) => { r1: string; q1: boolean; }' is not assignable to type '(arg: Identity<{} & { r1: number; q1: boolean; }>) => void'.
        Types of parameters 'arg' and 'arg' are incompatible.
          Type 'Identity<{} & { r1: number; q1: boolean; }>' is not assignable to type '{ r1: string; q1: boolean; }'.
            Types of property 'r1' are incompatible.
              Type 'number' is not assignable to type 'string'.
typings-tests/expected-errors-wrong-onload-params.tsx(21,31): error TS2345: Argument of type '{ name: \\"p2\\"; path: [string, \\"r1\\"[]]; queryParams: \\"q1\\"[]; onLoad: (arg: { r1: string; q1: boolean; }) => { r1: string; q1: boolean; }; converters: { q1: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; }; }' is not assignable to parameter of type '{ name: \\"p2\\"; path: string | [string, \\"r1\\"[]]; queryParams?: \\"q1\\"[] | undefined; onLoad?: ((arg: Identity<{ q1?: boolean | undefined; } & { r1: string; }>) => void) | undefined; defaults?: {} | undefined; converters?: { q1: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; } | undefined; component?: (new (props: Identity<{ q1?: boolean | undefined; } & { r1: string; }>) => Component<any, {}>) | StatelessComponent<Identity<{ q1?: boolean | undefined; } & { r1: string; }>> | undefined; }'.
  Types of property 'onLoad' are incompatible.
    Type '(arg: { r1: string; q1: boolean; }) => { r1: string; q1: boolean; }' is not assignable to type '((arg: Identity<{ q1?: boolean | undefined; } & { r1: string; }>) => void) | undefined'.
      Type '(arg: { r1: string; q1: boolean; }) => { r1: string; q1: boolean; }' is not assignable to type '(arg: Identity<{ q1?: boolean | undefined; } & { r1: string; }>) => void'.
        Types of parameters 'arg' and 'arg' are incompatible.
          Type 'Identity<{ q1?: boolean | undefined; } & { r1: string; }>' is not assignable to type '{ r1: string; q1: boolean; }'.
            Types of property 'q1' are incompatible.
              Type 'boolean | undefined' is not assignable to type 'boolean'.
                Type 'undefined' is not assignable to type 'boolean'.
typings-tests/expected-errors-wrong-onload-params.tsx(31,31): error TS2345: Argument of type '{ name: \\"noQuery\\"; path: [string, (\\"r1\\" | \\"r2\\")[]]; onLoad: (args: { missingArg: string; }) => { missingArg: string; }; defaults: { r1: number; r2: false; }; converters: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; r2: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; }; }' is not assignable to parameter of type '{ name: \\"noQuery\\"; path: string | [string, (\\"r1\\" | \\"r2\\")[]]; queryParams?: string[] | undefined; onLoad?: ((arg: Identity<{} & { r1: number; r2: boolean; }>) => void) | undefined; defaults?: { r1: number; r2: boolean; } | undefined; converters?: { r1: { toString: (id: number) => string; fromString: (arg: string) => number; }; r2: { toString: (nid: boolean) => string; fromString: (arg: string) => boolean; }; } | undefined; component?: (new (props: Identity<{} & { r1: number; r2: boolean; }>) => Component<any, {}>) | StatelessComponent<Identity<{} & { r1: number; r2: boolean; }>> | undefined; }'.
  Types of property 'onLoad' are incompatible.
    Type '(args: { missingArg: string; }) => { missingArg: string; }' is not assignable to type '((arg: Identity<{} & { r1: number; r2: boolean; }>) => void) | undefined'.
      Type '(args: { missingArg: string; }) => { missingArg: string; }' is not assignable to type '(arg: Identity<{} & { r1: number; r2: boolean; }>) => void'.
        Types of parameters 'args' and 'arg' are incompatible.
          Type 'Identity<{} & { r1: number; r2: boolean; }>' is not assignable to type '{ missingArg: string; }'.
            Property 'missingArg' is missing in type 'Identity<{} & { r1: number; r2: boolean; }>'.
typings-tests/expected-errors-wrong-onload-params.tsx(42,31): error TS2345: Argument of type '{ name: \\"noArgs\\"; path: string; onLoad: (args: { q1: string; }) => { q1: string; }; }' is not assignable to parameter of type '{ name: \\"noArgs\\"; path: string | [string, string[]]; queryParams?: string[] | undefined; onLoad?: ((arg: Identity<{} & {}>) => void) | undefined; defaults?: {} | undefined; converters?: {} | undefined; component?: (new (props: Identity<{} & {}>) => Component<any, {}>) | StatelessComponent<Identity<{} & {}>> | undefined; }'.
  Types of property 'onLoad' are incompatible.
    Type '(args: { q1: string; }) => { q1: string; }' is not assignable to type '((arg: Identity<{} & {}>) => void) | undefined'.
      Type '(args: { q1: string; }) => { q1: string; }' is not assignable to type '(arg: Identity<{} & {}>) => void'.
        Types of parameters 'args' and 'arg' are incompatible.
          Type 'Identity<{} & {}>' is not assignable to type '{ q1: string; }'.
            Property 'q1' is missing in type 'Identity<{} & {}>'.
"
`;

exports[`Verify expected errors from wrong onload params matches expected 2`] = `""`;

exports[`Verify output of no-errors matches expected 1`] = `""`;

exports[`Verify output of no-errors matches expected 2`] = `""`;
